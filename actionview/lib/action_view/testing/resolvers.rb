require "action_view/template/resolver"

module ActionView #:nodoc:
  # Use FixtureResolver in your tests to simulate the presence of files on the
  # file system. This is used internally by Rails' own test suite, and is
  # useful for testing extensions that have no way of knowing what the file
  # system will look like at runtime.
  class FixtureResolver < PathResolver
    attr_reader :hash

    def initialize(hash = {}, pattern = nil)
      super(pattern)
      @hash = hash
    end

    def to_s
      @hash.keys.join(", ")
    end

  private

    def build_query(metadata)
      query = ""
      EXTENSIONS.each_key do |ext|
        query << "(" << metadata.details[ext].map { |e| e && Regexp.escape(".#{e}") }.join("|") << "|)"
      end
      @query = /^(#{Regexp.escape(metadata.virtual_path)})#{query}$/
      @query
    end

    def run_query(query, metadata)
      @hash.reject { |_path, _array| !query.match?(_path) }
    end

    def generate_templates(template_files, metadata)
      templates = []
      template_files.each do |_path, array|
        handler, format, variant = extract_handler_and_format_and_variant(_path, metadata.details[:formats])
        source, updated_at = array

        templates << Template.new(source, _path, handler,
          virtual_path: metadata.virtual_path.virtual,
          format: format,
          variant: variant,
          updated_at: updated_at
        )
      end

      templates.sort_by { |t| -t.identifier.match(/^#{@query}$/).captures.reject(&:blank?).size }
    end
  end

  class NullResolver < PathResolver
    def find(metadata)
      path = metadata.virtual_path
      handler, format, variant = extract_handler_and_format_and_variant(metadata.name, metadata.details[:formats])
      [ActionView::Template.new("Template generated by Null Resolver", path.virtual, handler, virtual_path: path.virtual, format: format, variant: variant)]
    end

    def query(path, exts, formats, _)
      handler, format, variant = extract_handler_and_format_and_variant(path, formats)
      [ActionView::Template.new("Template generated by Null Resolver", path.virtual, handler, virtual_path: path.virtual, format: format, variant: variant)]
    end
  end
end
